# SENSORS
# 2018-11-28

# Wetter ######################################################################
- platform: darksky
  api_key: !secret Dark_Sky
  name: Wetterdaten
  language: de
  update_interval: '00:10'
  monitored_conditions:
    - icon
    - precip_type
    - precip_intensity
    - precip_probability
    - precip_accumulation
    - temperature
    - apparent_temperature
    - dew_point
    - wind_speed
    - wind_bearing
    - cloud_cover
    - humidity
    - pressure
    - visibility
    - ozone
    - temperature_high
    - temperature_low
    - apparent_temperature_high
    - apparent_temperature_low
    - precip_intensity_max
    - uv_index
    - moon_phase
# Wetter Ende ######################################################################

# Odroid I/O ######################################################################
- platform: command_line
  name: "HZ Stand Ventil"
  command: "gpio aread AIN.0"
  scan_interval: 60
  unit_of_measurement: "°"

# 1 Wire Sensoren
- platform: onewire
  names:
    10-0008017b83d2: Vorlauf
    10-0008017e0003: Ruecklauf #    10-0008017e04e2: Sens3
    scan_interval: 60
# Odroid I/O Ende ######################################################################     

- platform: time_date
  friendly_name: "Zeit"
  display_options:
    - 'time'
    - 'date'

- platform: volkszaehler
  name: "Volkszaehler"
  uuid: '2ee5fe80-e45a-11e8-bc59-97cb8a00bde1'
  monitored_conditions:
    - average
    - consumption
    - min
    - max

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_free
    - type: memory_use_percent
    - type: load_1m
    - type: processor_use
    - type: last_boot
    - type: since_last_boot
    
- platform: template
  sensors:
    hz_vorl_temp:
      friendly_name: "Vorlauf Solltemp."
      unit_of_measurement: '°C'
      value_template: "{{ ((states.sensor.wetterdaten_temperature.state | float - states.input_number.hz_min_temp.state | float) * ((states.input_number.hz_max_vorl.state | float - states.input_number.hz_min_vorl.state | float) / (states.input_number.hz_min_temp.state | float - states.input_number.hz_max_temp.state | float)) + states.input_number.hz_max_vorl.state | float)  | round(1) }}"

# Luftdaten Feinstaubsensor

#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "PM10"
#  value_template: '{{ float(value_json["sensordatavalues"][0].value) | round(1) }}'
#  unit_of_measurement: "µg/m³"

#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "PM2_5"
#  value_template: '{{ float(value_json["sensordatavalues"][1].value) | round(1) }}'
#  unit_of_measurement: "µg/m³"

#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "Temp"
#  value_template: '{{ (float(value_json["sensordatavalues"][2].value) - 1.3) | round(1) }}'
#  unit_of_measurement: "°C"

#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "rel_Feuchte"
#  value_template: '{{ float(value_json["sensordatavalues"][3].value) | round(1) }}'
#  unit_of_measurement: "%"

#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "Luftdruck"    
#  value_template: '{{ ((float(value_json["sensordatavalues"][4].value) | multiply(0.01)) | round(1)) + 10.0 }}'
#  unit_of_measurement: "mbar"
    
#- platform: rest
#  resource: http://192.168.1.91/data.json
#  name: "Signal"
#  value_template: '{{ float(value_json["sensordatavalues"][8].value) | round(0) }}'
#  unit_of_measurement: "dB"
